// liberatory-map-starter/src/App.js

import React, { useState, useEffect } from "react";
import CytoscapeComponent from "react-cytoscapejs";
import axios from "axios";

const seedConcept = "Debt";

const initialNodes = [
  { data: { id: seedConcept, label: seedConcept }, classes: "center" },
];

const App = () => {
  const [elements, setElements] = useState(initialNodes);
  const [poem, setPoem] = useState([]);

  // Fetch links from Wikipedia
  const fetchLinks = async (page) => {
    const url = `https://en.wikipedia.org/w/api.php?action=parse&page=${page}&format=json&origin=*`;
    try {
      const res = await axios.get(url);
      const links = res.data.parse.links
        .filter((l) => !l.ns && !l.exists.includes("missing"))
        .slice(0, 10); // limit for demo

      const newElements = links.map((link) => ({
        data: { id: link['*'], label: link['*'] },
      }));

      const newEdges = links.map((link) => ({
        data: { source: page, target: link['*'] },
      }));

      setElements([...initialNodes, ...newElements, ...newEdges]);
    } catch (err) {
      console.error("Error fetching links:", err);
    }
  };

  // Fetch intro line from Wikipedia
  const fetchIntro = async (page) => {
    const url = `https://en.wikipedia.org/api/rest_v1/page/summary/${page}`;
    try {
      const res = await axios.get(url);
      return res.data.extract;
    } catch (err) {
      console.error("Error fetching intro:", err);
      return "(No intro found)";
    }
  };

  const handleNodeClick = async (event) => {
    const id = event.target.id();
    const line = await fetchIntro(id);
    setPoem([...poem, line]);
  };

  useEffect(() => {
    fetchLinks(seedConcept);
  }, []);

  return (
    <div style={{ display: "flex", height: "100vh" }}>
      <div style={{ flex: 2 }}>
        <CytoscapeComponent
          elements={elements}
          style={{ width: "100%", height: "100%" }}
          layout={{ name: "cose" }}
          stylesheet={[
            {
              selector: ".center",
              style: { "background-color": "#8a2be2", label: "data(label)" },
            },
            {
              selector: "node",
              style: { label: "data(label)", "font-size": "12px" },
            },
          ]}
          cy={(cy) => cy.on("tap", "node", handleNodeClick)}
        />
      </div>
      <div style={{ flex: 1, background: "#111", color: "white", padding: "1rem" }}>
        <h2>Your Resistance Reading</h2>
        {poem.map((line, index) => (
          <p key={index}>{line}</p>
        ))}
      </div>
    </div>
  );
};

export default App;
